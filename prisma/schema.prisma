generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums
enum choice_type {
  RADIO
  CHECKBOX
  DROP_DOWN
}

enum file_type {
  ANY
  DOCUMENT
  PRESENTATION
  SPREADSHEET
  PDF
  IMAGE
  VIDEO
  AUDIO
}

enum rating_type {
  STAR
  HEART
}

enum info_type {
  WEBSITE
  PHONE
  EMAIL
}

enum question_type {
  CHOICE
  FILE_UPLOAD
  DATE
  NPS
  RATING
  INFO
  TEXT
}

enum feedback_sentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

// tables

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  password        String
  first_name      String
  last_name       String?
  avatar_url      String?
  is_active       Boolean   @default(true)
  created_at      DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at DateTime? @updatedAt @db.Timestamptz(3)

  // relations
  event_logs                              EventLog[]
  created_forms                           Form[]                    @relation("created_by_user")
  last_updated_forms                      Form[]                    @relation("last_updated_by_user")
  created_file_uploads                    FileUpload[]              @relation("created_by_user")
  last_updated_file_uploads               FileUpload[]              @relation("last_updated_by_user")
  last_updated_quiz_settings              FormQuizSetting[]
  last_updated_form_response_settings     FormResponseSetting[]
  last_updated_form_presentation_settings FormPresentationSetting[]
  created_choice_questions                ChoiceQuestion[]          @relation("created_by_user")
  last_updated_choice_questions           ChoiceQuestion[]          @relation("last_updated_by_user")
  created_file_upload_questions           FileUploadQuestion[]      @relation("created_by_user")
  last_updated_file_upload_questions      FileUploadQuestion[]      @relation("last_updated_by_user")
  created_date_questions                  DateQuestion[]            @relation("created_by_user")
  last_updated_date_questions             DateQuestion[]            @relation("last_updated_by_user")
  created_nps_questions                   NpsQuestion[]             @relation("created_by_user")
  last_updated_nps_questions              NpsQuestion[]             @relation("last_updated_by_user")
  created_rating_questions                RatingQuestion[]          @relation("created_by_user")
  last_updated_rating_questions           RatingQuestion[]          @relation("last_updated_by_user")
  created_info_questions                  InfoQuestion[]            @relation("created_by_user")
  last_updated_info_questions             InfoQuestion[]            @relation("last_updated_by_user")
  created_text_questions                  TextQuestion[]            @relation("created_by_user")
  last_updated_text_questions             TextQuestion[]            @relation("last_updated_by_user")
  created_options                         Option[]                  @relation("created_by_user")
  last_updated_options                    Option[]                  @relation("last_updated_by_user")
  created_feedbacks                       Feedback[]                @relation("created_by_user")
  last_updated_feedbacks                  Feedback[]                @relation("last_updated_by_user")
  created_feedback_links                  FeedbackLink[]            @relation("created_by_user")
  last_updated_feedback_links             FeedbackLink[]            @relation("last_updated_by_user")
  created_gradings                        Grading[]                 @relation("created_by_user")
  last_updated_gradings                   Grading[]                 @relation("last_updated_by_user")
  create_grading_correct_options          GradingCorrectOption[]    @relation("created_by_user")
  last_updated_grading_correct_options    GradingCorrectOption[]    @relation("last_updated_by_user")

  @@index([first_name])
  @@map("users")
}

model FileUpload {
  id                 Int      @id @default(autoincrement())
  name               String
  alt_text           String?
  caption            String?
  width              Int
  height             Int
  formats            Json?
  hash               String
  extension          String
  mime               String
  size               Float
  url                String
  preview_url        String
  created_by_id      Int
  last_updated_by_id Int
  created_at         DateTime @default(now()) @db.Timestamptz(3)

  // relations
  created_by_user      User               @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User               @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])
  forms                Form[]
  options              Option[]
  file_upload_answers  FileUploadAnswer[]

  @@map("file_uploads")
}

model Form {
  id                        Int       @id @default(autoincrement())
  title                     String
  header_img_file_upload_id Int?
  description               String?
  is_active                 Boolean   @default(true)
  created_by_id             Int
  is_published              Boolean   @default(false)
  last_updated_by_id        Int?
  created_at                DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at           DateTime? @updatedAt @db.Timestamptz(3)

  // relations
  created_by_user      User                     @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User?                    @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])
  header_img           FileUpload?              @relation(fields: [header_img_file_upload_id], references: [id])
  responses            Response[]
  quiz_setting         FormQuizSetting?
  response_setting     FormResponseSetting?
  presentation_setting FormPresentationSetting?

  @@unique([id, created_by_id])
  @@map("forms")
}

model FormQuizSetting {
  id                        Int       @id @default(autoincrement())
  form_id                   Int       @unique
  default_point_value       Int       @default(0)
  release_score_immediately Boolean   @default(false)
  view_missed_questions     Boolean   @default(true)
  view_correct_answers      Boolean   @default(true)
  view_point_values         Boolean   @default(true)
  created_at                DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at           DateTime? @updatedAt @db.Timestamptz(3)
  last_updated_by_id        Int?

  // relations
  form Form  @relation(fields: [form_id], references: [id])
  user User? @relation(fields: [last_updated_by_id], references: [id])

  @@map("form_quiz_settings")
}

model FormResponseSetting {
  id                     Int       @id @default(autoincrement())
  form_id                Int       @unique
  all_questions_required Boolean   @default(true)
  single_response        Boolean   @default(true)
  last_updated_at        DateTime? @updatedAt @db.Timestamptz(3)
  last_updated_by_id     Int?

  // relations
  user User? @relation(fields: [last_updated_by_id], references: [id])
  form Form  @relation(fields: [form_id], references: [id])

  @@map("form_response_settings")
}

model FormPresentationSetting {
  id                 Int       @id @default(autoincrement())
  form_id            Int       @unique
  show_progress_bar  Boolean   @default(false)
  shuffle_question   Boolean   @default(false)
  last_updated_at    DateTime? @updatedAt @db.Timestamptz(3)
  last_updated_by_id Int?

  // relations
  user User? @relation(fields: [last_updated_by_id], references: [id])
  form Form  @relation(fields: [form_id], references: [id])

  @@map("form_presentation_settings")
}

model ChoiceQuestion {
  id                 Int         @id @default(autoincrement())
  content            String
  type               choice_type
  shuffle_options    Boolean     @default(false)
  is_active          Boolean     @default(true)
  created_at         DateTime    @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime?   @updatedAt @db.Timestamptz(3)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  created_by_user      User  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User? @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("choice_questions")
}

model FileUploadQuestion {
  id                  Int         @id @default(autoincrement())
  content             String
  max_file_size       Int
  max_files           Int
  accepted_file_types file_type[]
  created_at          DateTime    @default(now()) @db.Timestamptz(3)
  last_updated_at     DateTime?   @updatedAt @db.Timestamptz(3)
  is_active           Boolean     @default(true)
  created_by_id       Int
  last_updated_by_id  Int?

  // relations
  created_by_user      User  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User? @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("file_upload_questions")
}

model DateQuestion {
  id                 Int       @id @default(autoincrement())
  content            String
  include_year       Boolean   @default(true)
  include_time       Boolean   @default(true)
  created_at         DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime? @updatedAt @db.Timestamptz(3)
  is_active          Boolean   @default(true)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  created_by_user      User  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User? @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("date_questions")
}

model NpsQuestion {
  id                 Int       @id @default(autoincrement())
  content            String
  high               Int
  low                Int
  low_label          String
  high_label         String
  created_at         DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime? @updatedAt @db.Timestamptz(3)
  is_active          Boolean   @default(true)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  created_by_user      User  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User? @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("nps_questions")
}

model RatingQuestion {
  id                 Int         @id @default(autoincrement())
  content            String
  type               rating_type
  high               Int
  low                Int
  low_label          String
  high_label         String
  created_at         DateTime    @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime?   @updatedAt @db.Timestamptz(3)
  is_active          Boolean     @default(true)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  created_by_user      User  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User? @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("rating_questions")
}

model InfoQuestion {
  id                 Int       @id @default(autoincrement())
  content            String
  type               info_type
  created_at         DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime? @updatedAt @db.Timestamptz(3)
  is_active          Boolean   @default(true)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  created_by_user      User  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User? @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("info_questions")
}

model TextQuestion {
  id                 Int       @id @default(autoincrement())
  content            String
  paragraph          Boolean   @default(false)
  created_at         DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime? @updatedAt @db.Timestamptz(3)
  is_active          Boolean   @default(true)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  created_by_user      User  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User? @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("text_questions")
}

model Option {
  id                 Int           @id @default(autoincrement())
  question_id        Int
  content            String
  image_file_id      Int?
  position           Int
  question_type      question_type
  created_at         DateTime      @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime?     @updatedAt @db.Timestamptz(3)
  is_active          Boolean       @default(true)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  grading_correct_option GradingCorrectOption?
  file_upload            FileUpload?           @relation(fields: [image_file_id], references: [id])
  created_by_user        User                  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user   User?                 @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@unique([id, question_id])
  @@map("options")
}

model Feedback {
  id                 Int                @id @default(autoincrement())
  content            String
  sentiment          feedback_sentiment
  created_at         DateTime           @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime?          @updatedAt @db.Timestamptz(3)
  is_active          Boolean            @default(true)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  created_by_user         User      @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user    User?     @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])
  right_grading_feedbacks Grading[] @relation("feedback_when_right")
  wrong_grading_feedbacks Grading[] @relation("feedback_when_wrong")
  Grade                   Grade[]

  @@map("feedbacks")
}

model FeedbackLink {
  id                 Int      @id @default(autoincrement())
  feedback_id        Int
  link_text          String
  link               String
  created_at         DateTime @default(now()) @db.Timestamptz(3)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  created_by_user      User  @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User? @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("feedback_links")
}

model Grading {
  id                     Int           @id @default(autoincrement())
  question_id            String
  question_type          question_type
  point_value            Int
  feedback_id_when_right Int?
  feedback_id_when_wrong Int?
  created_at             DateTime      @default(now()) @db.Timestamptz(3)
  last_updated_at        DateTime?     @updatedAt @db.Timestamptz(3)
  created_by_id          Int
  last_updated_by_id     Int?

  // relations
  correct_options      GradingCorrectOption[]
  created_by_user      User                   @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User?                  @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])
  feedback_when_right  Feedback?              @relation("feedback_when_right", fields: [feedback_id_when_right], references: [id])
  feedback_when_wrong  Feedback?              @relation("feedback_when_wrong", fields: [feedback_id_when_wrong], references: [id])

  @@unique([id, question_id])
  @@map("gradings")
}

model GradingCorrectOption {
  id                 Int       @id @default(autoincrement())
  grading_id         Int
  option_id          Int       @unique
  created_at         DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at    DateTime? @updatedAt @db.Timestamptz(3)
  is_active          Boolean   @default(true)
  created_by_id      Int
  last_updated_by_id Int?

  // relations
  grading              Grading @relation(fields: [grading_id], references: [id])
  option               Option  @relation(fields: [option_id], references: [id])
  created_by_user      User    @relation("created_by_user", fields: [created_by_id], references: [id])
  last_updated_by_user User?   @relation("last_updated_by_user", fields: [last_updated_by_id], references: [id])

  @@map("grading_correct_options")
}

model Response {
  id               Int       @id @default(autoincrement())
  form_id          Int
  respondent_email String
  total_score      Int
  answers          Answer[]
  created_at       DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at  DateTime? @updatedAt @db.Timestamptz(3)

  // relations
  form Form @relation(fields: [form_id], references: [id])

  @@map("responses")
}

model Answer {
  id              Int           @id @default(autoincrement())
  question_id     Int
  question_type   question_type
  response_id     Int
  created_at      DateTime      @default(now()) @db.Timestamptz(3)
  last_updated_at DateTime?     @updatedAt @db.Timestamptz(3)

  // relations
  textAnswers       TextAnswer[]
  fileUploadAnswers FileUploadAnswer[]
  response          Response           @relation(fields: [response_id], references: [id])
  grade             Grade?

  @@map("answers")
}

model TextAnswer {
  id              Int       @id @default(autoincrement())
  value           String
  answer_id       Int
  created_at      DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at DateTime? @updatedAt @db.Timestamptz(3)

  // relations
  answer Answer @relation(fields: [answer_id], references: [id])

  @@map("text_answers")
}

model FileUploadAnswer {
  id              Int       @id @default(autoincrement())
  file_upload_id  Int
  answer_id       Int
  created_at      DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at DateTime? @updatedAt @db.Timestamptz(3)

  // relations
  answer      Answer     @relation(fields: [answer_id], references: [id])
  file_upload FileUpload @relation(fields: [file_upload_id], references: [id])

  @@map("file_upload_answers")
}

model Grade {
  id              Int       @id @default(autoincrement())
  answer_id       Int       @unique
  is_correct      Boolean
  feedback_id     Int?
  score           Int
  created_at      DateTime  @default(now()) @db.Timestamptz(3)
  last_updated_at DateTime? @updatedAt @db.Timestamptz(3)

  // relations
  answer   Answer?   @relation(fields: [answer_id], references: [id])
  feedback Feedback? @relation(fields: [feedback_id], references: [id])

  @@map("grades")
}

model EventType {
  id              Int        @id @default(autoincrement())
  name            String     @unique
  created_at      DateTime   @default(now()) @db.Timestamptz(3)
  last_updated_at DateTime?  @updatedAt @db.Timestamptz(3)
  event_logs      EventLog[]

  @@map("event_types")
}

model EventLog {
  id            Int      @id @default(autoincrement())
  user_id       Int
  event_type_id Int
  context       Json?
  created_at    DateTime @default(now()) @db.Timestamptz(3)

  // relations
  user       User      @relation(fields: [user_id], references: [id])
  event_type EventType @relation(fields: [event_type_id], references: [id])

  @@map("event_logs")
}
