generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enums

enum ChoiceType {
  RADIO
  CHECKBOX
  DROP_DOWN

  @@map("choice_type")
}

enum FileType {
  ANY
  DOCUMENT
  PRESENTATION
  SPREADSHEET
  PDF
  IMAGE
  VIDEO
  AUDIO

  @@map("file_type")
}

enum RatingType {
  STAR
  HEART

  @@map("rating_type")
}

enum InfoType {
  WEBSITE
  PHONE
  EMAIL

  @@map("info_type")
}

enum QuestionType {
  CHOICE
  FILE_UPLOAD
  DATE
  NPS
  RATING
  INFO
  TEXT

  @@map("question_type")
}

enum FeedbackSentiment {
  POSITIVE
  NEGATIVE
  NEUTRAL

  @@map("feedback_sentiment")
}

// tables

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  firstName     String    @map("first_name")
  lastName      String?   @map("last_name")
  avatarUrl     String?   @map("avatar_url")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)

  // relations
  eventLogs                           EventLog[]
  createdForms                        Form[]                    @relation("createdByUser")
  lastUpdatedForms                    Form[]                    @relation("lastUpdatedByUser")
  createdFileUploads                  FileUpload[]              @relation("createdByUser")
  lastUpdatedFileUploads              FileUpload[]              @relation("lastUpdatedByUser")
  createdFormQuizSettings             FormQuizSetting[]         @relation("createdByUser")
  lastUpdatedFormQuizSettings         FormQuizSetting[]         @relation("lastUpdatedByUser")
  createdFormResponseSettings         FormResponseSetting[]     @relation("createdByUser")
  lastUpdatedFormResponseSettings     FormResponseSetting[]     @relation("lastUpdatedByUser")
  createdFormPresentationSettings     FormPresentationSetting[] @relation("createdByUser")
  lastUpdatedFormPresentationSettings FormPresentationSetting[] @relation("lastUpdatedByUser")
  createdChoiceQuestions              ChoiceQuestion[]          @relation("createdByUser")
  lastUpdatedChoiceQuestions          ChoiceQuestion[]          @relation("lastUpdatedByUser")
  createdFileUploadQuestions          FileUploadQuestion[]      @relation("createdByUser")
  lastUpdatedFileUploadQuestions      FileUploadQuestion[]      @relation("lastUpdatedByUser")
  createdDateQuestions                DateQuestion[]            @relation("createdByUser")
  lastUpdatedDateQuestions            DateQuestion[]            @relation("lastUpdatedByUser")
  createdNpsQuestions                 NpsQuestion[]             @relation("createdByUser")
  lastUpdatedNpsQuestions             NpsQuestion[]             @relation("lastUpdatedByUser")
  createdRatingQuestions              RatingQuestion[]          @relation("createdByUser")
  lastUpdatedRatingQuestions          RatingQuestion[]          @relation("lastUpdatedByUser")
  createdInfoQuestions                InfoQuestion[]            @relation("createdByUser")
  lastUpdatedInfoQuestions            InfoQuestion[]            @relation("lastUpdatedByUser")
  createdTextQuestions                TextQuestion[]            @relation("createdByUser")
  lastUpdatedTextQuestions            TextQuestion[]            @relation("lastUpdatedByUser")
  createdOptions                      Option[]                  @relation("createdByUser")
  lastUpdatedOptions                  Option[]                  @relation("lastUpdatedByUser")
  createdFeedbacks                    Feedback[]                @relation("createdByUser")
  lastUpdatedFeedbacks                Feedback[]                @relation("lastUpdatedByUser")
  createdFeedbackLinks                FeedbackLink[]            @relation("createdByUser")
  lastUpdatedFeedbackLinks            FeedbackLink[]            @relation("lastUpdatedByUser")
  createdGradings                     Grading[]                 @relation("createdByUser")
  lastUpdatedGradings                 Grading[]                 @relation("lastUpdatedByUser")
  createGradingCorrectOptions         GradingCorrectOption[]    @relation("createdByUser")
  lastUpdatedGradingCorrectOptions    GradingCorrectOption[]    @relation("lastUpdatedByUser")

  @@map("users")
}

model FileUpload {
  id              Int      @id @default(autoincrement())
  name            String
  altText         String?  @map("alt_text")
  caption         String?
  width           Int
  height          Int
  formats         Json?
  hash            String
  extension       String
  mime            String
  size            Float
  url             String
  previewUrl      String   @map("preview_url")
  createdById     Int      @map("created_by_id")
  lastUpdatedById Int      @map("last_updated_by_id")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // relations
  createdByUser     User               @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User               @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])
  forms             Form[]
  options           Option[]
  fileUploadAnswers FileUploadAnswer[]

  @@map("file_uploads")
}

model Form {
  id                    Int       @id @default(autoincrement())
  title                 String
  headerImgFileUploadId Int?      @map("header_img_file_upload_id")
  description           String?
  isActive              Boolean   @default(true) @map("is_active")
  createdById           Int       @map("created_by_id")
  isPublished           Boolean   @default(false) @map("is_published")
  lastUpdatedById       Int?      @map("last_updated_by_id")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt         DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)

  // relations
  createdByUser       User                     @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser   User?                    @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])
  headerImg           FileUpload?              @relation(fields: [headerImgFileUploadId], references: [id])
  responses           Response[]
  quizSetting         FormQuizSetting?
  responseSetting     FormResponseSetting?
  presentationSetting FormPresentationSetting?
  formQuestions       FormQuestion[]

  @@map("forms")
}

model FormQuizSetting {
  id                      Int       @id @default(autoincrement())
  formId                  Int       @unique @map("form_id")
  defaultPointValue       Int       @default(0) @map("default_point_value")
  releaseScoreImmediately Boolean   @default(false) @map("release_score_immediately")
  viewMissedQuestions     Boolean   @default(true) @map("view_missed_questions")
  viewCorrectAnswers      Boolean   @default(true) @map("view_correct_answers")
  viewPointValues         Boolean   @default(true) @map("view_point_values")
  createdById             Int       @map("created_by_id")
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt           DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  lastUpdatedById         Int?      @map("last_updated_by_id")

  // relations
  form              Form  @relation(fields: [formId], references: [id], onDelete: Cascade)
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("form_quiz_settings")
}

model FormResponseSetting {
  id                   Int       @id @default(autoincrement())
  formId               Int       @unique @map("form_id")
  allQuestionsRequired Boolean   @default(true) @map("all_questions_required")
  singleResponse       Boolean   @default(true) @map("single_response")
  createdById          Int       @map("created_by_id")
  lastUpdatedAt        DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  lastUpdatedById      Int?      @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])
  form              Form  @relation(fields: [formId], references: [id])

  @@map("form_response_settings")
}

model FormPresentationSetting {
  id              Int       @id @default(autoincrement())
  formId          Int       @unique @map("form_id")
  showProgressBar Boolean   @default(false) @map("show_progress_bar")
  shuffleQuestion Boolean   @default(false) @map("shuffle_question")
  createdById     Int       @map("created_by_id")
  lastUpdatedAt   DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  lastUpdatedById Int?      @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])
  form              Form  @relation(fields: [formId], references: [id])

  @@map("form_presentation_settings")
}

model ChoiceQuestion {
  id              Int        @id @default(autoincrement())
  content         String     @default("")
  choiceType      ChoiceType @map("choice_type")
  shuffleOptions  Boolean    @default(false) @map("shuffle_options")
  isActive        Boolean    @default(true) @map("is_active")
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime?  @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  createdById     Int        @map("created_by_id")
  lastUpdatedById Int?       @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("choice_questions")
}

model FileUploadQuestion {
  id                Int        @id @default(autoincrement())
  content           String     @default("")
  maxFileSize       Int        @default(10) @map("max_file_size")
  maxFiles          Int        @default(2) @map("max_files")
  acceptedFileTypes FileType[] @default([]) @map("accepted_file_types")
  createdAt         DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt     DateTime?  @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive          Boolean    @default(true) @map("is_active")
  createdById       Int        @map("created_by_id")
  lastUpdatedById   Int?       @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("file_upload_questions")
}

model DateQuestion {
  id              Int       @id @default(autoincrement())
  content         String    @default("")
  includeYear     Boolean   @default(true) @map("include_year")
  includeTime     Boolean   @default(true) @map("include_time")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive        Boolean   @default(true) @map("is_active")
  createdById     Int       @map("created_by_id")
  lastUpdatedById Int?      @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("date_questions")
}

model NpsQuestion {
  id              Int       @id @default(autoincrement())
  content         String    @default("")
  high            Int       @default(10)
  low             Int       @default(1)
  lowLabel        String    @default("low") @map("low_label")
  highLabel       String    @default("high") @map("high_label")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive        Boolean   @default(true) @map("is_active")
  createdById     Int       @map("created_by_id")
  lastUpdatedById Int?      @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("nps_questions")
}

model RatingQuestion {
  id              Int        @id @default(autoincrement())
  content         String     @default("")
  ratingType      RatingType @map("rating_type")
  high            Int        @default(10)
  low             Int        @default(1)
  lowLabel        String     @default("low") @map("low_label")
  highLabel       String     @default("high") @map("high_label")
  createdAt       DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime?  @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive        Boolean    @default(true) @map("is_active")
  createdById     Int        @map("created_by_id")
  lastUpdatedById Int?       @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("rating_questions")
}

model InfoQuestion {
  id              Int       @id @default(autoincrement())
  content         String    @default("")
  infoType        InfoType  @map("info_type")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive        Boolean   @default(true) @map("is_active")
  createdById     Int       @map("created_by_id")
  lastUpdatedById Int?      @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("info_questions")
}

model TextQuestion {
  id              Int       @id @default(autoincrement())
  content         String    @default("")
  paragraph       Boolean   @default(false)
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive        Boolean   @default(true) @map("is_active")
  createdById     Int       @map("created_by_id")
  lastUpdatedById Int?      @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("text_questions")
}

model FormQuestion {
  id           Int          @id @default(autoincrement())
  formId       Int          @map("form_id")
  questionId   Int          @map("question_id")
  questionType QuestionType @map("question_type")
  position     Int

  // relations
  form Form @relation(fields: [formId], references: [id])

  @@unique([formId, questionId, questionType])
  @@map("form_questions")
}

model Option {
  id              Int          @id @default(autoincrement())
  questionId      Int          @map("question_id")
  content         String
  imageFileId     Int?         @map("image_file_id")
  position        Int
  questionType    QuestionType @map("question_type")
  createdAt       DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime?    @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive        Boolean      @default(true) @map("is_active")
  createdById     Int          @map("created_by_id")
  lastUpdatedById Int?         @map("last_updated_by_id")

  // relations
  gradingCorrectOption GradingCorrectOption?
  image                FileUpload?           @relation(fields: [imageFileId], references: [id])
  createdByUser        User                  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser    User?                 @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@unique([id, questionId])
  @@map("options")
}

model Feedback {
  id              Int               @id @default(autoincrement())
  content         String
  sentiment       FeedbackSentiment
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime?         @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive        Boolean           @default(true) @map("is_active")
  createdById     Int               @map("created_by_id")
  lastUpdatedById Int?              @map("last_updated_by_id")

  // relations
  createdByUser         User      @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser     User?     @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])
  rightGradingFeedbacks Grading[] @relation("feedbackWhenRight")
  wrongGradingFeedbacks Grading[] @relation("feedbackWhenWrong")
  grades                Grade[]

  @@map("feedbacks")
}

model FeedbackLink {
  id              Int      @id @default(autoincrement())
  feedbackId      Int      @map("feedback_id")
  linkText        String   @map("link_text")
  link            String
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  createdById     Int      @map("created_by_id")
  lastUpdatedById Int?     @map("last_updated_by_id")

  // relations
  createdByUser     User  @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User? @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("feedback_links")
}

model Grading {
  id                  Int          @id @default(autoincrement())
  questionId          String       @map("question_id")
  questionType        QuestionType @map("question_type")
  pointValue          Int          @map("point_value")
  feedbackIdWhenRight Int?         @map("feedback_id_when_right")
  feedbackIdWhenWrong Int?         @map("feedback_id_when_wrong")
  createdAt           DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt       DateTime?    @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  createdById         Int          @map("created_by_id")
  lastUpdatedById     Int?         @map("last_updated_by_id")

  // relations
  correctOptions    GradingCorrectOption[]
  createdByUser     User                   @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User?                  @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])
  feedbackWhenRight Feedback?              @relation("feedbackWhenRight", fields: [feedbackIdWhenRight], references: [id])
  feedbackWhenWrong Feedback?              @relation("feedbackWhenWrong", fields: [feedbackIdWhenWrong], references: [id])

  @@unique([id, questionId])
  @@map("gradings")
}

model GradingCorrectOption {
  id              Int       @id @default(autoincrement())
  gradingId       Int       @map("grading_id")
  optionId        Int       @unique @map("option_id")
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)
  isActive        Boolean   @default(true) @map("is_active")
  createdById     Int       @map("created_by_id")
  lastUpdatedById Int?      @map("last_updated_by_id")

  // relations
  grading           Grading @relation(fields: [gradingId], references: [id])
  option            Option  @relation(fields: [optionId], references: [id])
  createdByUser     User    @relation("createdByUser", fields: [createdById], references: [id])
  lastUpdatedByUser User?   @relation("lastUpdatedByUser", fields: [lastUpdatedById], references: [id])

  @@map("grading_correct_options")
}

model Response {
  id              Int       @id @default(autoincrement())
  formId          Int       @map("form_id")
  respondentEmail String    @map("respondent_email")
  totalScore      Int       @map("total_score")
  answers         Answer[]
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt   DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)

  // relations
  form Form @relation(fields: [formId], references: [id])

  @@map("responses")
}

model Answer {
  id            Int          @id @default(autoincrement())
  questionId    Int          @map("question_id")
  questionType  QuestionType @map("question_type")
  responseId    Int          @map("response_id")
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt DateTime?    @updatedAt @map("last_updated_at") @db.Timestamptz(3)

  // relations
  textAnswers       TextAnswer[]
  fileUploadAnswers FileUploadAnswer[]
  response          Response           @relation(fields: [responseId], references: [id])
  grade             Grade?

  @@map("answers")
}

model TextAnswer {
  id            Int       @id @default(autoincrement())
  value         String
  answerId      Int       @map("answer_id")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)

  // relations
  answer Answer @relation(fields: [answerId], references: [id])

  @@map("text_answers")
}

model FileUploadAnswer {
  id            Int       @id @default(autoincrement())
  fileUploadId  Int       @map("file_upload_id")
  answerId      Int       @map("answer_id")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)

  // relations
  answer     Answer     @relation(fields: [answerId], references: [id])
  fileUpload FileUpload @relation(fields: [fileUploadId], references: [id])

  @@map("file_upload_answers")
}

model Grade {
  id            Int       @id @default(autoincrement())
  answerId      Int       @unique @map("answer_id")
  isCorrect     Boolean   @map("is_correct")
  feedbackId    Int?      @map("feedback_id")
  score         Int
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)

  // relations
  answer   Answer?   @relation(fields: [answerId], references: [id])
  feedback Feedback? @relation(fields: [feedbackId], references: [id])

  @@map("grades")
}

model EventType {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at") @db.Timestamptz(3)

  // relations
  eventLogs EventLog[]

  @@map("event_types")
}

model EventLog {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  eventTypeId Int      @map("event_type_id")
  context     Json?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  // relations
  user      User      @relation(fields: [userId], references: [id])
  eventType EventType @relation(fields: [eventTypeId], references: [id])

  @@map("event_logs")
}
